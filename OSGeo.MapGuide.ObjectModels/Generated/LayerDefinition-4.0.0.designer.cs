#pragma warning disable 1591, 0114, 0108
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.3.0.33001
//    <NameSpace>OSGeo.MapGuide.ObjectModels.LayerDefinition</NameSpace><Collection>BindingList</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLasyLoading>False</EnableLasyLoading><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>False</AutomaticProperties><DisableDebug>False</DisableDebug><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>False</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace OSGeo.MapGuide.ObjectModels.LayerDefinition.v4_0_0
{
    using OSGeo.MapGuide.ObjectModels.Common;
    using OSGeo.MapGuide.ObjectModels.LayerDefinition;
    using OSGeo.MapGuide.ObjectModels.SymbolDefinition.v2_4_0;
    using OSGeo.MapGuide.ObjectModels.WatermarkDefinition.v2_4_0;
    using System.ComponentModel;
    using System.IO;

    /// <summary>
    /// The specification of the data source and stylization for a layer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class LayerDefinition : LayerDefinitionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string versionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LayerDefinition() {
            this.versionField = "4.0.0";
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((this.versionField != null)) {
                    if ((versionField.Equals(value) != true)) {
                        this.versionField = value;
                        this.OnPropertyChanged("version");
                    }
                }
                else {
                    this.versionField = value;
                    this.OnPropertyChanged("version");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LayerDefinition));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LayerDefinition object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            return base.NormalizedSerialize(Serializer, this);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LayerDefinition object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LayerDefinition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LayerDefinition obj, out System.Exception exception) {
            exception = null;
            obj = default(LayerDefinition);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LayerDefinition obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LayerDefinition Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LayerDefinition)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LayerDefinition object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LayerDefinition object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LayerDefinition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LayerDefinition obj, out System.Exception exception) {
            exception = null;
            obj = default(LayerDefinition);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LayerDefinition obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LayerDefinition LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LayerDefinition object
        /// </summary>
        public virtual LayerDefinition Clone() {
            return ((LayerDefinition)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class LayerDefinitionType : BaseSerializable, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BaseLayerDefinitionType itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("DrawingLayerDefinition", typeof(DrawingLayerDefinitionType))]
        [System.Xml.Serialization.XmlElementAttribute("GridLayerDefinition", typeof(GridLayerDefinitionType))]
        [System.Xml.Serialization.XmlElementAttribute("VectorLayerDefinition", typeof(VectorLayerDefinitionType))]
        public BaseLayerDefinitionType Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LayerDefinitionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LayerDefinitionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LayerDefinitionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(LayerDefinitionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LayerDefinitionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LayerDefinitionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LayerDefinitionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LayerDefinitionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LayerDefinitionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(LayerDefinitionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LayerDefinitionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LayerDefinitionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LayerDefinitionType object
        /// </summary>
        public virtual LayerDefinitionType Clone() {
            return ((LayerDefinitionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class DrawingLayerDefinitionType : BaseLayerDefinitionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sheetField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string layerFilterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double minScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double maxScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool maxScaleFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public DrawingLayerDefinitionType() {
            this.minScaleField = 0;
        }
        
        public string Sheet {
            get {
                return this.sheetField;
            }
            set {
                if ((this.sheetField != null)) {
                    if ((sheetField.Equals(value) != true)) {
                        this.sheetField = value;
                        this.OnPropertyChanged("Sheet");
                    }
                }
                else {
                    this.sheetField = value;
                    this.OnPropertyChanged("Sheet");
                }
            }
        }
        
        public string LayerFilter {
            get {
                return this.layerFilterField;
            }
            set {
                if ((this.layerFilterField != null)) {
                    if ((layerFilterField.Equals(value) != true)) {
                        this.layerFilterField = value;
                        this.OnPropertyChanged("LayerFilter");
                    }
                }
                else {
                    this.layerFilterField = value;
                    this.OnPropertyChanged("LayerFilter");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(0)]
        public double MinScale {
            get {
                return this.minScaleField;
            }
            set {
                if ((minScaleField.Equals(value) != true)) {
                    this.minScaleField = value;
                    this.OnPropertyChanged("MinScale");
                }
            }
        }
        
        public double MaxScale {
            get {
                return this.maxScaleField;
            }
            set {
                if ((maxScaleField.Equals(value) != true)) {
                    this.maxScaleField = value;
                    this.OnPropertyChanged("MaxScale");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxScaleSpecified {
            get {
                return this.maxScaleFieldSpecified;
            }
            set {
                if ((maxScaleFieldSpecified.Equals(value) != true)) {
                    this.maxScaleFieldSpecified = value;
                    this.OnPropertyChanged("MaxScaleSpecified");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DrawingLayerDefinitionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DrawingLayerDefinitionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DrawingLayerDefinitionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DrawingLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DrawingLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(DrawingLayerDefinitionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DrawingLayerDefinitionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DrawingLayerDefinitionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DrawingLayerDefinitionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DrawingLayerDefinitionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DrawingLayerDefinitionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DrawingLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DrawingLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(DrawingLayerDefinitionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DrawingLayerDefinitionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DrawingLayerDefinitionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DrawingLayerDefinitionType object
        /// </summary>
        public virtual DrawingLayerDefinitionType Clone() {
            return ((DrawingLayerDefinitionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridLayerDefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VectorLayerDefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrawingLayerDefinitionType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class BaseLayerDefinitionType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string resourceIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double opacityField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<WatermarkType> watermarksField;

        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public BaseLayerDefinitionType() {
            this.opacityField = 1;
            this.watermarksField = new BindingList<WatermarkType>();
        }
        
        public string ResourceId {
            get {
                return this.resourceIdField;
            }
            set {
                if ((this.resourceIdField != null)) {
                    if ((resourceIdField.Equals(value) != true)) {
                        this.resourceIdField = value;
                        this.OnPropertyChanged("ResourceId");
                    }
                }
                else {
                    this.resourceIdField = value;
                    this.OnPropertyChanged("ResourceId");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(1)]
        public double Opacity {
            get {
                return this.opacityField;
            }
            set {
                if ((opacityField.Equals(value) != true)) {
                    this.opacityField = value;
                    this.OnPropertyChanged("Opacity");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("Watermark", IsNullable = false)]
        public BindingList<WatermarkType> Watermarks
        {
            get
            {
                return this.watermarksField;
            }
            set
            {
                if ((this.watermarksField != null))
                {
                    if ((watermarksField.Equals(value) != true))
                    {
                        this.watermarksField = value;
                        this.OnPropertyChanged("Watermarks");
                    }
                }
                else
                {
                    this.watermarksField = value;
                    this.OnPropertyChanged("Watermarks");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BaseLayerDefinitionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BaseLayerDefinitionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BaseLayerDefinitionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BaseLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BaseLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(BaseLayerDefinitionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BaseLayerDefinitionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BaseLayerDefinitionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BaseLayerDefinitionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BaseLayerDefinitionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BaseLayerDefinitionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BaseLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BaseLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(BaseLayerDefinitionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BaseLayerDefinitionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BaseLayerDefinitionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this BaseLayerDefinitionType object
        /// </summary>
        public virtual BaseLayerDefinitionType Clone() {
            return ((BaseLayerDefinitionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridLayerDefinitionType : BaseLayerDefinitionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string featureNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string geometryField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<GridScaleRangeType> gridScaleRangeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string FeatureName {
            get {
                return this.featureNameField;
            }
            set {
                if ((this.featureNameField != null)) {
                    if ((featureNameField.Equals(value) != true)) {
                        this.featureNameField = value;
                        this.OnPropertyChanged("FeatureName");
                    }
                }
                else {
                    this.featureNameField = value;
                    this.OnPropertyChanged("FeatureName");
                }
            }
        }
        
        public string Geometry {
            get {
                return this.geometryField;
            }
            set {
                if ((this.geometryField != null)) {
                    if ((geometryField.Equals(value) != true)) {
                        this.geometryField = value;
                        this.OnPropertyChanged("Geometry");
                    }
                }
                else {
                    this.geometryField = value;
                    this.OnPropertyChanged("Geometry");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("GridScaleRange")]
        public BindingList<GridScaleRangeType> GridScaleRange {
            get {
                return this.gridScaleRangeField;
            }
            set {
                if ((this.gridScaleRangeField != null)) {
                    if ((gridScaleRangeField.Equals(value) != true)) {
                        this.gridScaleRangeField = value;
                        this.OnPropertyChanged("GridScaleRange");
                    }
                }
                else {
                    this.gridScaleRangeField = value;
                    this.OnPropertyChanged("GridScaleRange");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridLayerDefinitionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridLayerDefinitionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridLayerDefinitionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridLayerDefinitionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridLayerDefinitionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridLayerDefinitionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridLayerDefinitionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridLayerDefinitionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridLayerDefinitionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridLayerDefinitionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridLayerDefinitionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridLayerDefinitionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridLayerDefinitionType object
        /// </summary>
        public virtual GridLayerDefinitionType Clone() {
            return ((GridLayerDefinitionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridScaleRangeType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double minScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double maxScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool maxScaleFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GridSurfaceStyleType surfaceStyleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GridColorStyleType colorStyleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double rebuildFactorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public GridScaleRangeType() {
            this.minScaleField = 0;
        }
        
        [System.ComponentModel.DefaultValueAttribute(0)]
        public double MinScale {
            get {
                return this.minScaleField;
            }
            set {
                if ((minScaleField.Equals(value) != true)) {
                    this.minScaleField = value;
                    this.OnPropertyChanged("MinScale");
                }
            }
        }
        
        public double MaxScale {
            get {
                return this.maxScaleField;
            }
            set {
                if ((maxScaleField.Equals(value) != true)) {
                    this.maxScaleField = value;
                    this.OnPropertyChanged("MaxScale");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxScaleSpecified {
            get {
                return this.maxScaleFieldSpecified;
            }
            set {
                if ((maxScaleFieldSpecified.Equals(value) != true)) {
                    this.maxScaleFieldSpecified = value;
                    this.OnPropertyChanged("MaxScaleSpecified");
                }
            }
        }
        
        public GridSurfaceStyleType SurfaceStyle {
            get {
                return this.surfaceStyleField;
            }
            set {
                if ((this.surfaceStyleField != null)) {
                    if ((surfaceStyleField.Equals(value) != true)) {
                        this.surfaceStyleField = value;
                        this.OnPropertyChanged("SurfaceStyle");
                    }
                }
                else {
                    this.surfaceStyleField = value;
                    this.OnPropertyChanged("SurfaceStyle");
                }
            }
        }
        
        public GridColorStyleType ColorStyle {
            get {
                return this.colorStyleField;
            }
            set {
                if ((this.colorStyleField != null)) {
                    if ((colorStyleField.Equals(value) != true)) {
                        this.colorStyleField = value;
                        this.OnPropertyChanged("ColorStyle");
                    }
                }
                else {
                    this.colorStyleField = value;
                    this.OnPropertyChanged("ColorStyle");
                }
            }
        }
        
        public double RebuildFactor {
            get {
                return this.rebuildFactorField;
            }
            set {
                if ((rebuildFactorField.Equals(value) != true)) {
                    this.rebuildFactorField = value;
                    this.OnPropertyChanged("RebuildFactor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridScaleRangeType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridScaleRangeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridScaleRangeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridScaleRangeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridScaleRangeType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridScaleRangeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridScaleRangeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridScaleRangeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridScaleRangeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridScaleRangeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridScaleRangeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridScaleRangeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridScaleRangeType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridScaleRangeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridScaleRangeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridScaleRangeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridScaleRangeType object
        /// </summary>
        public virtual GridScaleRangeType Clone() {
            return ((GridScaleRangeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridSurfaceStyleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string bandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double zeroValueField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double scaleFactorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string defaultColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public GridSurfaceStyleType() {
            this.zeroValueField = 0;
            this.scaleFactorField = 1;
        }
        
        public string Band {
            get {
                return this.bandField;
            }
            set {
                if ((this.bandField != null)) {
                    if ((bandField.Equals(value) != true)) {
                        this.bandField = value;
                        this.OnPropertyChanged("Band");
                    }
                }
                else {
                    this.bandField = value;
                    this.OnPropertyChanged("Band");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(0)]
        public double ZeroValue {
            get {
                return this.zeroValueField;
            }
            set {
                if ((zeroValueField.Equals(value) != true)) {
                    this.zeroValueField = value;
                    this.OnPropertyChanged("ZeroValue");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(1)]
        public double ScaleFactor {
            get {
                return this.scaleFactorField;
            }
            set {
                if ((scaleFactorField.Equals(value) != true)) {
                    this.scaleFactorField = value;
                    this.OnPropertyChanged("ScaleFactor");
                }
            }
        }
        
        public string DefaultColor {
            get {
                return this.defaultColorField;
            }
            set {
                if ((this.defaultColorField != null)) {
                    if ((defaultColorField.Equals(value) != true)) {
                        this.defaultColorField = value;
                        this.OnPropertyChanged("DefaultColor");
                    }
                }
                else {
                    this.defaultColorField = value;
                    this.OnPropertyChanged("DefaultColor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridSurfaceStyleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridSurfaceStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridSurfaceStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridSurfaceStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridSurfaceStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridSurfaceStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridSurfaceStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridSurfaceStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridSurfaceStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridSurfaceStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridSurfaceStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridSurfaceStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridSurfaceStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridSurfaceStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridSurfaceStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridSurfaceStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridSurfaceStyleType object
        /// </summary>
        public virtual GridSurfaceStyleType Clone() {
            return ((GridSurfaceStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridColorStyleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private HillShadeType hillShadeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object transparencyColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double brightnessFactorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double contrastFactorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<GridColorRuleType> colorRuleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public GridColorStyleType() {
            this.brightnessFactorField = 0;
            this.contrastFactorField = 0;
        }
        
        public HillShadeType HillShade {
            get {
                return this.hillShadeField;
            }
            set {
                if ((this.hillShadeField != null)) {
                    if ((hillShadeField.Equals(value) != true)) {
                        this.hillShadeField = value;
                        this.OnPropertyChanged("HillShade");
                    }
                }
                else {
                    this.hillShadeField = value;
                    this.OnPropertyChanged("HillShade");
                }
            }
        }
        
        public object TransparencyColor {
            get {
                return this.transparencyColorField;
            }
            set {
                if ((this.transparencyColorField != null)) {
                    if ((transparencyColorField.Equals(value) != true)) {
                        this.transparencyColorField = value;
                        this.OnPropertyChanged("TransparencyColor");
                    }
                }
                else {
                    this.transparencyColorField = value;
                    this.OnPropertyChanged("TransparencyColor");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(0)]
        public double BrightnessFactor {
            get {
                return this.brightnessFactorField;
            }
            set {
                if ((brightnessFactorField.Equals(value) != true)) {
                    this.brightnessFactorField = value;
                    this.OnPropertyChanged("BrightnessFactor");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(0)]
        public double ContrastFactor {
            get {
                return this.contrastFactorField;
            }
            set {
                if ((contrastFactorField.Equals(value) != true)) {
                    this.contrastFactorField = value;
                    this.OnPropertyChanged("ContrastFactor");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ColorRule")]
        public BindingList<GridColorRuleType> ColorRule {
            get {
                return this.colorRuleField;
            }
            set {
                if ((this.colorRuleField != null)) {
                    if ((colorRuleField.Equals(value) != true)) {
                        this.colorRuleField = value;
                        this.OnPropertyChanged("ColorRule");
                    }
                }
                else {
                    this.colorRuleField = value;
                    this.OnPropertyChanged("ColorRule");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridColorStyleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridColorStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridColorStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridColorStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridColorStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridColorStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridColorStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridColorStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridColorStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridColorStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridColorStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridColorStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridColorStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridColorStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridColorStyleType object
        /// </summary>
        public virtual GridColorStyleType Clone() {
            return ((GridColorStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class HillShadeType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string bandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double azimuthField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double altitudeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double scaleFactorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public HillShadeType() {
            this.scaleFactorField = 1;
        }
        
        public string Band {
            get {
                return this.bandField;
            }
            set {
                if ((this.bandField != null)) {
                    if ((bandField.Equals(value) != true)) {
                        this.bandField = value;
                        this.OnPropertyChanged("Band");
                    }
                }
                else {
                    this.bandField = value;
                    this.OnPropertyChanged("Band");
                }
            }
        }
        
        public double Azimuth {
            get {
                return this.azimuthField;
            }
            set {
                if ((azimuthField.Equals(value) != true)) {
                    this.azimuthField = value;
                    this.OnPropertyChanged("Azimuth");
                }
            }
        }
        
        public double Altitude {
            get {
                return this.altitudeField;
            }
            set {
                if ((altitudeField.Equals(value) != true)) {
                    this.altitudeField = value;
                    this.OnPropertyChanged("Altitude");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(1)]
        public double ScaleFactor {
            get {
                return this.scaleFactorField;
            }
            set {
                if ((scaleFactorField.Equals(value) != true)) {
                    this.scaleFactorField = value;
                    this.OnPropertyChanged("ScaleFactor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(HillShadeType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HillShadeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an HillShadeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output HillShadeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out HillShadeType obj, out System.Exception exception) {
            exception = null;
            obj = default(HillShadeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out HillShadeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static HillShadeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((HillShadeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current HillShadeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an HillShadeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HillShadeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HillShadeType obj, out System.Exception exception) {
            exception = null;
            obj = default(HillShadeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out HillShadeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static HillShadeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this HillShadeType object
        /// </summary>
        public virtual HillShadeType Clone() {
            return ((HillShadeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridColorRuleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextSymbolType labelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GridColorType colorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        public TextSymbolType Label {
            get {
                return this.labelField;
            }
            set {
                if ((this.labelField != null)) {
                    if ((labelField.Equals(value) != true)) {
                        this.labelField = value;
                        this.OnPropertyChanged("Label");
                    }
                }
                else {
                    this.labelField = value;
                    this.OnPropertyChanged("Label");
                }
            }
        }
        
        public GridColorType Color {
            get {
                return this.colorField;
            }
            set {
                if ((this.colorField != null)) {
                    if ((colorField.Equals(value) != true)) {
                        this.colorField = value;
                        this.OnPropertyChanged("Color");
                    }
                }
                else {
                    this.colorField = value;
                    this.OnPropertyChanged("Color");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridColorRuleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridColorRuleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridColorRuleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridColorRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridColorRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorRuleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridColorRuleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridColorRuleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridColorRuleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridColorRuleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridColorRuleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridColorRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridColorRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorRuleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridColorRuleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridColorRuleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridColorRuleType object
        /// </summary>
        public virtual GridColorRuleType Clone() {
            return ((GridColorRuleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class TextSymbolType : SymbolType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string textField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string fontNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string foregroundColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string backgroundColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BackgroundStyleType backgroundStyleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string horizontalAlignmentField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string verticalAlignmentField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string boldField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string italicField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string underlinedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextSymbolTypeAdvancedPlacement advancedPlacementField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string labelJustificationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public TextSymbolType() {
            this.horizontalAlignmentField = "\'Center\'";
            this.verticalAlignmentField = "\'Baseline\'";
            this.boldField = "false";
            this.italicField = "false";
            this.underlinedField = "false";
        }
        
        public string Text {
            get {
                return this.textField;
            }
            set {
                if ((this.textField != null)) {
                    if ((textField.Equals(value) != true)) {
                        this.textField = value;
                        this.OnPropertyChanged("Text");
                    }
                }
                else {
                    this.textField = value;
                    this.OnPropertyChanged("Text");
                }
            }
        }
        
        public string FontName {
            get {
                return this.fontNameField;
            }
            set {
                if ((this.fontNameField != null)) {
                    if ((fontNameField.Equals(value) != true)) {
                        this.fontNameField = value;
                        this.OnPropertyChanged("FontName");
                    }
                }
                else {
                    this.fontNameField = value;
                    this.OnPropertyChanged("FontName");
                }
            }
        }
        
        public string ForegroundColor {
            get {
                return this.foregroundColorField;
            }
            set {
                if ((this.foregroundColorField != null)) {
                    if ((foregroundColorField.Equals(value) != true)) {
                        this.foregroundColorField = value;
                        this.OnPropertyChanged("ForegroundColor");
                    }
                }
                else {
                    this.foregroundColorField = value;
                    this.OnPropertyChanged("ForegroundColor");
                }
            }
        }
        
        public string BackgroundColor {
            get {
                return this.backgroundColorField;
            }
            set {
                if ((this.backgroundColorField != null)) {
                    if ((backgroundColorField.Equals(value) != true)) {
                        this.backgroundColorField = value;
                        this.OnPropertyChanged("BackgroundColor");
                    }
                }
                else {
                    this.backgroundColorField = value;
                    this.OnPropertyChanged("BackgroundColor");
                }
            }
        }
        
        public BackgroundStyleType BackgroundStyle {
            get {
                return this.backgroundStyleField;
            }
            set {
                if ((backgroundStyleField.Equals(value) != true)) {
                    this.backgroundStyleField = value;
                    this.OnPropertyChanged("BackgroundStyle");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("\'Center\'")]
        public string HorizontalAlignment {
            get {
                return this.horizontalAlignmentField;
            }
            set {
                if ((this.horizontalAlignmentField != null)) {
                    if ((horizontalAlignmentField.Equals(value) != true)) {
                        this.horizontalAlignmentField = value;
                        this.OnPropertyChanged("HorizontalAlignment");
                    }
                }
                else {
                    this.horizontalAlignmentField = value;
                    this.OnPropertyChanged("HorizontalAlignment");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("\'Baseline\'")]
        public string VerticalAlignment {
            get {
                return this.verticalAlignmentField;
            }
            set {
                if ((this.verticalAlignmentField != null)) {
                    if ((verticalAlignmentField.Equals(value) != true)) {
                        this.verticalAlignmentField = value;
                        this.OnPropertyChanged("VerticalAlignment");
                    }
                }
                else {
                    this.verticalAlignmentField = value;
                    this.OnPropertyChanged("VerticalAlignment");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("false")]
        public string Bold {
            get {
                return this.boldField;
            }
            set {
                if ((this.boldField != null)) {
                    if ((boldField.Equals(value) != true)) {
                        this.boldField = value;
                        this.OnPropertyChanged("Bold");
                    }
                }
                else {
                    this.boldField = value;
                    this.OnPropertyChanged("Bold");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("false")]
        public string Italic {
            get {
                return this.italicField;
            }
            set {
                if ((this.italicField != null)) {
                    if ((italicField.Equals(value) != true)) {
                        this.italicField = value;
                        this.OnPropertyChanged("Italic");
                    }
                }
                else {
                    this.italicField = value;
                    this.OnPropertyChanged("Italic");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("false")]
        public string Underlined {
            get {
                return this.underlinedField;
            }
            set {
                if ((this.underlinedField != null)) {
                    if ((underlinedField.Equals(value) != true)) {
                        this.underlinedField = value;
                        this.OnPropertyChanged("Underlined");
                    }
                }
                else {
                    this.underlinedField = value;
                    this.OnPropertyChanged("Underlined");
                }
            }
        }
        
        public TextSymbolTypeAdvancedPlacement AdvancedPlacement {
            get {
                return this.advancedPlacementField;
            }
            set {
                if ((this.advancedPlacementField != null)) {
                    if ((advancedPlacementField.Equals(value) != true)) {
                        this.advancedPlacementField = value;
                        this.OnPropertyChanged("AdvancedPlacement");
                    }
                }
                else {
                    this.advancedPlacementField = value;
                    this.OnPropertyChanged("AdvancedPlacement");
                }
            }
        }

        [System.ComponentModel.DefaultValueAttribute("'Left'")]
        public string LabelJustification
        {
            get
            {
                return this.labelJustificationField;
            }
            set
            {
                if ((this.labelJustificationField != null))
                {
                    if ((labelJustificationField.Equals(value) != true))
                    {
                        this.labelJustificationField = value;
                        this.OnPropertyChanged(nameof(LabelJustification));
                    }
                }
                else
                {
                    this.labelJustificationField = value;
                    this.OnPropertyChanged(nameof(LabelJustification));
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TextSymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TextSymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TextSymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TextSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TextSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(TextSymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TextSymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TextSymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TextSymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TextSymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TextSymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TextSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TextSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(TextSymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TextSymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TextSymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TextSymbolType object
        /// </summary>
        public virtual TextSymbolType Clone() {
            return ((TextSymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TextSymbolTypeAdvancedPlacement : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double scaleLimitField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool scaleLimitFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public double ScaleLimit {
            get {
                return this.scaleLimitField;
            }
            set {
                if ((scaleLimitField.Equals(value) != true)) {
                    this.scaleLimitField = value;
                    this.OnPropertyChanged("ScaleLimit");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScaleLimitSpecified {
            get {
                return this.scaleLimitFieldSpecified;
            }
            set {
                if ((scaleLimitFieldSpecified.Equals(value) != true)) {
                    this.scaleLimitFieldSpecified = value;
                    this.OnPropertyChanged("ScaleLimitSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TextSymbolTypeAdvancedPlacement));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TextSymbolTypeAdvancedPlacement object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TextSymbolTypeAdvancedPlacement object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TextSymbolTypeAdvancedPlacement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TextSymbolTypeAdvancedPlacement obj, out System.Exception exception) {
            exception = null;
            obj = default(TextSymbolTypeAdvancedPlacement);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TextSymbolTypeAdvancedPlacement obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TextSymbolTypeAdvancedPlacement Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TextSymbolTypeAdvancedPlacement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TextSymbolTypeAdvancedPlacement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TextSymbolTypeAdvancedPlacement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TextSymbolTypeAdvancedPlacement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TextSymbolTypeAdvancedPlacement obj, out System.Exception exception) {
            exception = null;
            obj = default(TextSymbolTypeAdvancedPlacement);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TextSymbolTypeAdvancedPlacement obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TextSymbolTypeAdvancedPlacement LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TextSymbolTypeAdvancedPlacement object
        /// </summary>
        public virtual TextSymbolTypeAdvancedPlacement Clone() {
            return ((TextSymbolTypeAdvancedPlacement)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BlockSymbolType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(W2DSymbolType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FontSymbolType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ImageSymbolType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarkSymbolType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TextSymbolType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class SymbolType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LengthUnitType unitField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SizeContextType sizeContextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sizeXField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sizeYField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string rotationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool maintainAspectField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string insertionPointXField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string insertionPointYField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public SymbolType() {
            this.rotationField = "0.0";
            this.maintainAspectField = true;
            this.insertionPointXField = "0.5";
            this.insertionPointYField = "0.5";
        }
        
        public LengthUnitType Unit {
            get {
                return this.unitField;
            }
            set {
                if ((unitField.Equals(value) != true)) {
                    this.unitField = value;
                    this.OnPropertyChanged("Unit");
                }
            }
        }
        
        public SizeContextType SizeContext {
            get {
                return this.sizeContextField;
            }
            set {
                if ((sizeContextField.Equals(value) != true)) {
                    this.sizeContextField = value;
                    this.OnPropertyChanged("SizeContext");
                }
            }
        }
        
        public string SizeX {
            get {
                return this.sizeXField;
            }
            set {
                if ((this.sizeXField != null)) {
                    if ((sizeXField.Equals(value) != true)) {
                        this.sizeXField = value;
                        this.OnPropertyChanged("SizeX");
                    }
                }
                else {
                    this.sizeXField = value;
                    this.OnPropertyChanged("SizeX");
                }
            }
        }
        
        public string SizeY {
            get {
                return this.sizeYField;
            }
            set {
                if ((this.sizeYField != null)) {
                    if ((sizeYField.Equals(value) != true)) {
                        this.sizeYField = value;
                        this.OnPropertyChanged("SizeY");
                    }
                }
                else {
                    this.sizeYField = value;
                    this.OnPropertyChanged("SizeY");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("0.0")]
        public string Rotation {
            get {
                return this.rotationField;
            }
            set {
                if ((this.rotationField != null)) {
                    if ((rotationField.Equals(value) != true)) {
                        this.rotationField = value;
                        this.OnPropertyChanged("Rotation");
                    }
                }
                else {
                    this.rotationField = value;
                    this.OnPropertyChanged("Rotation");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool MaintainAspect {
            get {
                return this.maintainAspectField;
            }
            set {
                if ((maintainAspectField.Equals(value) != true)) {
                    this.maintainAspectField = value;
                    this.OnPropertyChanged("MaintainAspect");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("0.5")]
        public string InsertionPointX {
            get {
                return this.insertionPointXField;
            }
            set {
                if ((this.insertionPointXField != null)) {
                    if ((insertionPointXField.Equals(value) != true)) {
                        this.insertionPointXField = value;
                        this.OnPropertyChanged("InsertionPointX");
                    }
                }
                else {
                    this.insertionPointXField = value;
                    this.OnPropertyChanged("InsertionPointX");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("0.5")]
        public string InsertionPointY {
            get
            {
                return this.insertionPointYField;
            }
            set
            {
                if ((this.insertionPointYField != null))
                {
                    if ((insertionPointYField.Equals(value) != true))
                    {
                        this.insertionPointYField = value;
                        this.OnPropertyChanged("InsertionPointY");
                    }
                }
                else
                {
                    this.insertionPointYField = value;
                    this.OnPropertyChanged("InsertionPointY");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(SymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(SymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SymbolType object
        /// </summary>
        public virtual SymbolType Clone() {
            return ((SymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class BlockSymbolType : SymbolType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string drawingNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string blockNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string blockColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string layerColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string DrawingName {
            get {
                return this.drawingNameField;
            }
            set {
                if ((this.drawingNameField != null)) {
                    if ((drawingNameField.Equals(value) != true)) {
                        this.drawingNameField = value;
                        this.OnPropertyChanged("DrawingName");
                    }
                }
                else {
                    this.drawingNameField = value;
                    this.OnPropertyChanged("DrawingName");
                }
            }
        }
        
        public string BlockName {
            get {
                return this.blockNameField;
            }
            set {
                if ((this.blockNameField != null)) {
                    if ((blockNameField.Equals(value) != true)) {
                        this.blockNameField = value;
                        this.OnPropertyChanged("BlockName");
                    }
                }
                else {
                    this.blockNameField = value;
                    this.OnPropertyChanged("BlockName");
                }
            }
        }
        
        public string BlockColor {
            get {
                return this.blockColorField;
            }
            set {
                if ((this.blockColorField != null)) {
                    if ((blockColorField.Equals(value) != true)) {
                        this.blockColorField = value;
                        this.OnPropertyChanged("BlockColor");
                    }
                }
                else {
                    this.blockColorField = value;
                    this.OnPropertyChanged("BlockColor");
                }
            }
        }
        
        public string LayerColor {
            get {
                return this.layerColorField;
            }
            set {
                if ((this.layerColorField != null)) {
                    if ((layerColorField.Equals(value) != true)) {
                        this.layerColorField = value;
                        this.OnPropertyChanged("LayerColor");
                    }
                }
                else {
                    this.layerColorField = value;
                    this.OnPropertyChanged("LayerColor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BlockSymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BlockSymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BlockSymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BlockSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BlockSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(BlockSymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BlockSymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BlockSymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BlockSymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BlockSymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BlockSymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BlockSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BlockSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(BlockSymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BlockSymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BlockSymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this BlockSymbolType object
        /// </summary>
        public virtual BlockSymbolType Clone() {
            return ((BlockSymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class W2DSymbolType : SymbolType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private W2DSymbolTypeW2DSymbol w2DSymbolField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string fillColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lineColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string textColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public W2DSymbolTypeW2DSymbol W2DSymbol {
            get {
                return this.w2DSymbolField;
            }
            set {
                if ((this.w2DSymbolField != null)) {
                    if ((w2DSymbolField.Equals(value) != true)) {
                        this.w2DSymbolField = value;
                        this.OnPropertyChanged("W2DSymbol");
                    }
                }
                else {
                    this.w2DSymbolField = value;
                    this.OnPropertyChanged("W2DSymbol");
                }
            }
        }
        
        public string FillColor {
            get {
                return this.fillColorField;
            }
            set {
                if ((this.fillColorField != null)) {
                    if ((fillColorField.Equals(value) != true)) {
                        this.fillColorField = value;
                        this.OnPropertyChanged("FillColor");
                    }
                }
                else {
                    this.fillColorField = value;
                    this.OnPropertyChanged("FillColor");
                }
            }
        }
        
        public string LineColor {
            get {
                return this.lineColorField;
            }
            set {
                if ((this.lineColorField != null)) {
                    if ((lineColorField.Equals(value) != true)) {
                        this.lineColorField = value;
                        this.OnPropertyChanged("LineColor");
                    }
                }
                else {
                    this.lineColorField = value;
                    this.OnPropertyChanged("LineColor");
                }
            }
        }
        
        public string TextColor {
            get {
                return this.textColorField;
            }
            set {
                if ((this.textColorField != null)) {
                    if ((textColorField.Equals(value) != true)) {
                        this.textColorField = value;
                        this.OnPropertyChanged("TextColor");
                    }
                }
                else {
                    this.textColorField = value;
                    this.OnPropertyChanged("TextColor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(W2DSymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current W2DSymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an W2DSymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output W2DSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out W2DSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(W2DSymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out W2DSymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static W2DSymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((W2DSymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current W2DSymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an W2DSymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output W2DSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out W2DSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(W2DSymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out W2DSymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static W2DSymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this W2DSymbolType object
        /// </summary>
        public virtual W2DSymbolType Clone() {
            return ((W2DSymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class W2DSymbolTypeW2DSymbol : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string resourceIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string libraryItemNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;

        public string ResourceId
        {
            get {
                return this.resourceIdField;
            }
            set {
                if ((this.resourceIdField != null)) {
                    if ((resourceIdField.Equals(value) != true)) {
                        this.resourceIdField = value;
                        this.OnPropertyChanged("ResourceId");
                    }
                }
                else {
                    this.resourceIdField = value;
                    this.OnPropertyChanged("ResourceId");
                }
            }
        }

        public string LibraryItemName
        {
            get {
                return this.libraryItemNameField;
            }
            set {
                if ((this.libraryItemNameField != null)) {
                    if ((libraryItemNameField.Equals(value) != true)) {
                        this.libraryItemNameField = value;
                        this.OnPropertyChanged("LibraryItemName");
                    }
                }
                else {
                    this.libraryItemNameField = value;
                    this.OnPropertyChanged("LibraryItemName");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(W2DSymbolTypeW2DSymbol));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current W2DSymbolTypeW2DSymbol object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an W2DSymbolTypeW2DSymbol object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output W2DSymbolTypeW2DSymbol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out W2DSymbolTypeW2DSymbol obj, out System.Exception exception) {
            exception = null;
            obj = default(W2DSymbolTypeW2DSymbol);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out W2DSymbolTypeW2DSymbol obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static W2DSymbolTypeW2DSymbol Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((W2DSymbolTypeW2DSymbol)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current W2DSymbolTypeW2DSymbol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an W2DSymbolTypeW2DSymbol object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output W2DSymbolTypeW2DSymbol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out W2DSymbolTypeW2DSymbol obj, out System.Exception exception) {
            exception = null;
            obj = default(W2DSymbolTypeW2DSymbol);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out W2DSymbolTypeW2DSymbol obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static W2DSymbolTypeW2DSymbol LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this W2DSymbolTypeW2DSymbol object
        /// </summary>
        public virtual W2DSymbolTypeW2DSymbol Clone() {
            return ((W2DSymbolTypeW2DSymbol)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class FontSymbolType : SymbolType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string fontNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string characterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool boldField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool boldFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool italicField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool italicFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool underlinedField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool underlinedFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string foregroundColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string FontName {
            get {
                return this.fontNameField;
            }
            set {
                if ((this.fontNameField != null)) {
                    if ((fontNameField.Equals(value) != true)) {
                        this.fontNameField = value;
                        this.OnPropertyChanged("FontName");
                    }
                }
                else {
                    this.fontNameField = value;
                    this.OnPropertyChanged("FontName");
                }
            }
        }
        
        public string Character {
            get {
                return this.characterField;
            }
            set {
                if ((this.characterField != null)) {
                    if ((characterField.Equals(value) != true)) {
                        this.characterField = value;
                        this.OnPropertyChanged("Character");
                    }
                }
                else {
                    this.characterField = value;
                    this.OnPropertyChanged("Character");
                }
            }
        }
        
        public bool Bold {
            get {
                return this.boldField;
            }
            set {
                if ((boldField.Equals(value) != true)) {
                    this.boldField = value;
                    this.OnPropertyChanged("Bold");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoldSpecified {
            get {
                return this.boldFieldSpecified;
            }
            set {
                if ((boldFieldSpecified.Equals(value) != true)) {
                    this.boldFieldSpecified = value;
                    this.OnPropertyChanged("BoldSpecified");
                }
            }
        }
        
        public bool Italic {
            get {
                return this.italicField;
            }
            set {
                if ((italicField.Equals(value) != true)) {
                    this.italicField = value;
                    this.OnPropertyChanged("Italic");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItalicSpecified {
            get {
                return this.italicFieldSpecified;
            }
            set {
                if ((italicFieldSpecified.Equals(value) != true)) {
                    this.italicFieldSpecified = value;
                    this.OnPropertyChanged("ItalicSpecified");
                }
            }
        }
        
        public bool Underlined {
            get {
                return this.underlinedField;
            }
            set {
                if ((underlinedField.Equals(value) != true)) {
                    this.underlinedField = value;
                    this.OnPropertyChanged("Underlined");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnderlinedSpecified {
            get {
                return this.underlinedFieldSpecified;
            }
            set {
                if ((underlinedFieldSpecified.Equals(value) != true)) {
                    this.underlinedFieldSpecified = value;
                    this.OnPropertyChanged("UnderlinedSpecified");
                }
            }
        }
        
        public string ForegroundColor {
            get {
                return this.foregroundColorField;
            }
            set {
                if ((this.foregroundColorField != null)) {
                    if ((foregroundColorField.Equals(value) != true)) {
                        this.foregroundColorField = value;
                        this.OnPropertyChanged("ForegroundColor");
                    }
                }
                else {
                    this.foregroundColorField = value;
                    this.OnPropertyChanged("ForegroundColor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FontSymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FontSymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FontSymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FontSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FontSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(FontSymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FontSymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FontSymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FontSymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FontSymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FontSymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FontSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FontSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(FontSymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FontSymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FontSymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FontSymbolType object
        /// </summary>
        public virtual FontSymbolType Clone() {
            return ((FontSymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ImageSymbolType : SymbolType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Content", typeof(byte[]), DataType="hexBinary")]
        [System.Xml.Serialization.XmlElementAttribute("Image", typeof(ImageSymbolTypeImage))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ImageSymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ImageSymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ImageSymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ImageSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ImageSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(ImageSymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ImageSymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ImageSymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ImageSymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ImageSymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ImageSymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ImageSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ImageSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(ImageSymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ImageSymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ImageSymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ImageSymbolType object
        /// </summary>
        public virtual ImageSymbolType Clone() {
            return ((ImageSymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ImageSymbolTypeImage : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object resourceIdField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object libraryItemNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public object ResourceId {
            get {
                return this.resourceIdField;
            }
            set {
                if ((this.resourceIdField != null)) {
                    if ((resourceIdField.Equals(value) != true)) {
                        this.resourceIdField = value;
                        this.OnPropertyChanged("ResourceId");
                    }
                }
                else {
                    this.resourceIdField = value;
                    this.OnPropertyChanged("ResourceId");
                }
            }
        }
        
        public object LibraryItemName {
            get {
                return this.libraryItemNameField;
            }
            set {
                if ((this.libraryItemNameField != null)) {
                    if ((libraryItemNameField.Equals(value) != true)) {
                        this.libraryItemNameField = value;
                        this.OnPropertyChanged("LibraryItemName");
                    }
                }
                else {
                    this.libraryItemNameField = value;
                    this.OnPropertyChanged("LibraryItemName");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ImageSymbolTypeImage));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ImageSymbolTypeImage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ImageSymbolTypeImage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ImageSymbolTypeImage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ImageSymbolTypeImage obj, out System.Exception exception) {
            exception = null;
            obj = default(ImageSymbolTypeImage);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ImageSymbolTypeImage obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ImageSymbolTypeImage Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ImageSymbolTypeImage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ImageSymbolTypeImage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ImageSymbolTypeImage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ImageSymbolTypeImage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ImageSymbolTypeImage obj, out System.Exception exception) {
            exception = null;
            obj = default(ImageSymbolTypeImage);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ImageSymbolTypeImage obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ImageSymbolTypeImage LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ImageSymbolTypeImage object
        /// </summary>
        public virtual ImageSymbolTypeImage Clone() {
            return ((ImageSymbolTypeImage)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class MarkSymbolType : SymbolType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ShapeType shapeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FillType fillField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private StrokeType edgeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ShapeType Shape {
            get {
                return this.shapeField;
            }
            set {
                if ((shapeField.Equals(value) != true)) {
                    this.shapeField = value;
                    this.OnPropertyChanged("Shape");
                }
            }
        }
        
        public FillType Fill {
            get {
                return this.fillField;
            }
            set {
                if ((this.fillField != null)) {
                    if ((fillField.Equals(value) != true)) {
                        this.fillField = value;
                        this.OnPropertyChanged("Fill");
                    }
                }
                else {
                    this.fillField = value;
                    this.OnPropertyChanged("Fill");
                }
            }
        }
        
        public StrokeType Edge {
            get {
                return this.edgeField;
            }
            set {
                if ((this.edgeField != null)) {
                    if ((edgeField.Equals(value) != true)) {
                        this.edgeField = value;
                        this.OnPropertyChanged("Edge");
                    }
                }
                else {
                    this.edgeField = value;
                    this.OnPropertyChanged("Edge");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MarkSymbolType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MarkSymbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MarkSymbolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MarkSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MarkSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(MarkSymbolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MarkSymbolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MarkSymbolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MarkSymbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MarkSymbolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MarkSymbolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MarkSymbolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MarkSymbolType obj, out System.Exception exception) {
            exception = null;
            obj = default(MarkSymbolType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MarkSymbolType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MarkSymbolType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MarkSymbolType object
        /// </summary>
        public virtual MarkSymbolType Clone() {
            return ((MarkSymbolType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class FillType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string fillPatternField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string foregroundColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string backgroundColorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string FillPattern {
            get {
                return this.fillPatternField;
            }
            set {
                if ((this.fillPatternField != null)) {
                    if ((fillPatternField.Equals(value) != true)) {
                        this.fillPatternField = value;
                        this.OnPropertyChanged("FillPattern");
                    }
                }
                else {
                    this.fillPatternField = value;
                    this.OnPropertyChanged("FillPattern");
                }
            }
        }
        
        public string ForegroundColor {
            get {
                return this.foregroundColorField;
            }
            set {
                if ((this.foregroundColorField != null)) {
                    if ((foregroundColorField.Equals(value) != true)) {
                        this.foregroundColorField = value;
                        this.OnPropertyChanged("ForegroundColor");
                    }
                }
                else {
                    this.foregroundColorField = value;
                    this.OnPropertyChanged("ForegroundColor");
                }
            }
        }
        
        public string BackgroundColor {
            get {
                return this.backgroundColorField;
            }
            set {
                if ((this.backgroundColorField != null)) {
                    if ((backgroundColorField.Equals(value) != true)) {
                        this.backgroundColorField = value;
                        this.OnPropertyChanged("BackgroundColor");
                    }
                }
                else {
                    this.backgroundColorField = value;
                    this.OnPropertyChanged("BackgroundColor");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FillType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FillType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FillType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FillType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FillType obj, out System.Exception exception) {
            exception = null;
            obj = default(FillType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FillType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FillType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FillType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FillType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FillType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FillType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FillType obj, out System.Exception exception) {
            exception = null;
            obj = default(FillType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FillType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FillType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FillType object
        /// </summary>
        public virtual FillType Clone() {
            return ((FillType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class StrokeType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lineStyleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string thicknessField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string colorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LengthUnitType unitField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SizeContextType sizeContextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LineStyle {
            get {
                return this.lineStyleField;
            }
            set {
                if ((this.lineStyleField != null)) {
                    if ((lineStyleField.Equals(value) != true)) {
                        this.lineStyleField = value;
                        this.OnPropertyChanged("LineStyle");
                    }
                }
                else {
                    this.lineStyleField = value;
                    this.OnPropertyChanged("LineStyle");
                }
            }
        }
        
        public string Thickness {
            get {
                return this.thicknessField;
            }
            set {
                if ((this.thicknessField != null)) {
                    if ((thicknessField.Equals(value) != true)) {
                        this.thicknessField = value;
                        this.OnPropertyChanged("Thickness");
                    }
                }
                else {
                    this.thicknessField = value;
                    this.OnPropertyChanged("Thickness");
                }
            }
        }
        
        public string Color {
            get {
                return this.colorField;
            }
            set {
                if ((this.colorField != null)) {
                    if ((colorField.Equals(value) != true)) {
                        this.colorField = value;
                        this.OnPropertyChanged("Color");
                    }
                }
                else {
                    this.colorField = value;
                    this.OnPropertyChanged("Color");
                }
            }
        }
        
        public LengthUnitType Unit {
            get {
                return this.unitField;
            }
            set {
                if ((unitField.Equals(value) != true)) {
                    this.unitField = value;
                    this.OnPropertyChanged("Unit");
                }
            }
        }
        
        public SizeContextType SizeContext {
            get {
                return this.sizeContextField;
            }
            set {
                if ((sizeContextField.Equals(value) != true)) {
                    this.sizeContextField = value;
                    this.OnPropertyChanged("SizeContext");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(StrokeType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StrokeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an StrokeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output StrokeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out StrokeType obj, out System.Exception exception) {
            exception = null;
            obj = default(StrokeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out StrokeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static StrokeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((StrokeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current StrokeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an StrokeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StrokeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StrokeType obj, out System.Exception exception) {
            exception = null;
            obj = default(StrokeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out StrokeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static StrokeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this StrokeType object
        /// </summary>
        public virtual StrokeType Clone() {
            return ((StrokeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridColorType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemChoiceType itemElementNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Band", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("Bands", typeof(GridColorBandsType))]
        [System.Xml.Serialization.XmlElementAttribute("ExplicitColor", typeof(string))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                if ((itemElementNameField.Equals(value) != true)) {
                    this.itemElementNameField = value;
                    this.OnPropertyChanged("ItemElementName");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridColorType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridColorType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridColorType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridColorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridColorType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridColorType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridColorType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridColorType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridColorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridColorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridColorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridColorType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridColorType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridColorType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridColorType object
        /// </summary>
        public virtual GridColorType Clone() {
            return ((GridColorType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class GridColorBandsType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ChannelBandType redBandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ChannelBandType greenBandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ChannelBandType blueBandField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ChannelBandType RedBand {
            get {
                return this.redBandField;
            }
            set {
                if ((this.redBandField != null)) {
                    if ((redBandField.Equals(value) != true)) {
                        this.redBandField = value;
                        this.OnPropertyChanged("RedBand");
                    }
                }
                else {
                    this.redBandField = value;
                    this.OnPropertyChanged("RedBand");
                }
            }
        }
        
        public ChannelBandType GreenBand {
            get {
                return this.greenBandField;
            }
            set {
                if ((this.greenBandField != null)) {
                    if ((greenBandField.Equals(value) != true)) {
                        this.greenBandField = value;
                        this.OnPropertyChanged("GreenBand");
                    }
                }
                else {
                    this.greenBandField = value;
                    this.OnPropertyChanged("GreenBand");
                }
            }
        }
        
        public ChannelBandType BlueBand {
            get {
                return this.blueBandField;
            }
            set {
                if ((this.blueBandField != null)) {
                    if ((blueBandField.Equals(value) != true)) {
                        this.blueBandField = value;
                        this.OnPropertyChanged("BlueBand");
                    }
                }
                else {
                    this.blueBandField = value;
                    this.OnPropertyChanged("BlueBand");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GridColorBandsType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GridColorBandsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GridColorBandsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GridColorBandsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GridColorBandsType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorBandsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GridColorBandsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GridColorBandsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GridColorBandsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GridColorBandsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GridColorBandsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GridColorBandsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GridColorBandsType obj, out System.Exception exception) {
            exception = null;
            obj = default(GridColorBandsType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GridColorBandsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GridColorBandsType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GridColorBandsType object
        /// </summary>
        public virtual GridColorBandsType Clone() {
            return ((GridColorBandsType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ChannelBandType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string bandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double lowBandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool lowBandFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double highBandField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool highBandFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private byte lowChannelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private byte highChannelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ChannelBandType() {
            this.lowChannelField = ((byte)(0));
            this.highChannelField = ((byte)(255));
        }
        
        public string Band {
            get {
                return this.bandField;
            }
            set {
                if ((this.bandField != null)) {
                    if ((bandField.Equals(value) != true)) {
                        this.bandField = value;
                        this.OnPropertyChanged("Band");
                    }
                }
                else {
                    this.bandField = value;
                    this.OnPropertyChanged("Band");
                }
            }
        }
        
        public double LowBand {
            get {
                return this.lowBandField;
            }
            set {
                if ((lowBandField.Equals(value) != true)) {
                    this.lowBandField = value;
                    this.OnPropertyChanged("LowBand");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LowBandSpecified {
            get {
                return this.lowBandFieldSpecified;
            }
            set {
                if ((lowBandFieldSpecified.Equals(value) != true)) {
                    this.lowBandFieldSpecified = value;
                    this.OnPropertyChanged("LowBandSpecified");
                }
            }
        }
        
        public double HighBand {
            get {
                return this.highBandField;
            }
            set {
                if ((highBandField.Equals(value) != true)) {
                    this.highBandField = value;
                    this.OnPropertyChanged("HighBand");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HighBandSpecified {
            get {
                return this.highBandFieldSpecified;
            }
            set {
                if ((highBandFieldSpecified.Equals(value) != true)) {
                    this.highBandFieldSpecified = value;
                    this.OnPropertyChanged("HighBandSpecified");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "0")]
        public byte LowChannel {
            get {
                return this.lowChannelField;
            }
            set {
                if ((lowChannelField.Equals(value) != true))
                {
                    this.lowChannelField = value;
                    this.OnPropertyChanged("LowChannel");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(typeof(byte), "255")]
        public byte HighChannel {
            get {
                return this.highChannelField;
            }
            set {
                if ((highChannelField.Equals(value) != true))
                {
                    this.highChannelField = value;
                    this.OnPropertyChanged("HighChannel");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ChannelBandType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ChannelBandType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ChannelBandType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ChannelBandType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ChannelBandType obj, out System.Exception exception) {
            exception = null;
            obj = default(ChannelBandType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ChannelBandType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ChannelBandType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ChannelBandType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ChannelBandType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ChannelBandType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ChannelBandType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ChannelBandType obj, out System.Exception exception) {
            exception = null;
            obj = default(ChannelBandType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ChannelBandType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ChannelBandType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ChannelBandType object
        /// </summary>
        public virtual ChannelBandType Clone() {
            return ((ChannelBandType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class VectorLayerDefinitionType : BaseLayerDefinitionType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string featureNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FeatureNameType featureNameTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool includeBoundsForSelectedFeaturesField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool includeBoundsForSelectedFeaturesFieldSpecfied;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<NameStringPairType> propertyMappingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string geometryField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private URLDataType urlDataField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string toolTipField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<VectorScaleRangeType> vectorScaleRangeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string FeatureName {
            get {
                return this.featureNameField;
            }
            set {
                if ((this.featureNameField != null)) {
                    if ((featureNameField.Equals(value) != true)) {
                        this.featureNameField = value;
                        this.OnPropertyChanged("FeatureName");
                    }
                }
                else {
                    this.featureNameField = value;
                    this.OnPropertyChanged("FeatureName");
                }
            }
        }
        
        public FeatureNameType FeatureNameType {
            get {
                return this.featureNameTypeField;
            }
            set {
                if ((featureNameTypeField.Equals(value) != true)) {
                    this.featureNameTypeField = value;
                    this.OnPropertyChanged("FeatureNameType");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IncludeBoundsForSelectedFeaturesSpecified
        {
            get
            {
                return this.includeBoundsForSelectedFeaturesFieldSpecfied;
            }
            set
            {
                if ((includeBoundsForSelectedFeaturesFieldSpecfied.Equals(value) != true))
                {
                    this.includeBoundsForSelectedFeaturesFieldSpecfied = value;
                    this.OnPropertyChanged(nameof(IncludeBoundsForSelectedFeaturesSpecified));
                }
            }
        }

        public bool IncludeBoundsForSelectedFeatures
        {
            get
            {
                return this.includeBoundsForSelectedFeaturesField;
            }
            set
            {
                if ((includeBoundsForSelectedFeaturesField.Equals(value) != true))
                {
                    this.includeBoundsForSelectedFeaturesField = value;
                    this.OnPropertyChanged("IncludeBoundsForSelectedFeatures");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("PropertyMapping")]
        public BindingList<NameStringPairType> PropertyMapping {
            get {
                return this.propertyMappingField;
            }
            set {
                if ((this.propertyMappingField != null)) {
                    if ((propertyMappingField.Equals(value) != true)) {
                        this.propertyMappingField = value;
                        this.OnPropertyChanged("PropertyMapping");
                    }
                }
                else {
                    this.propertyMappingField = value;
                    this.OnPropertyChanged("PropertyMapping");
                }
            }
        }
        
        public string Geometry {
            get {
                return this.geometryField;
            }
            set {
                if ((this.geometryField != null)) {
                    if ((geometryField.Equals(value) != true)) {
                        this.geometryField = value;
                        this.OnPropertyChanged("Geometry");
                    }
                }
                else {
                    this.geometryField = value;
                    this.OnPropertyChanged("Geometry");
                }
            }
        }

        public URLDataType UrlData
        {
            get
            {
                return this.urlDataField;
            }
            set
            {
                if ((this.urlDataField != null))
                {
                    if ((urlDataField.Equals(value) != true))
                    {
                        this.urlDataField = value;
                        this.OnPropertyChanged("UrlData");
                    }
                }
                else
                {
                    this.urlDataField = value;
                    this.OnPropertyChanged("UrlData");
                }
            }
        }
        
        public string ToolTip {
            get {
                return this.toolTipField;
            }
            set {
                if ((this.toolTipField != null)) {
                    if ((toolTipField.Equals(value) != true)) {
                        this.toolTipField = value;
                        this.OnPropertyChanged("ToolTip");
                    }
                }
                else {
                    this.toolTipField = value;
                    this.OnPropertyChanged("ToolTip");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("VectorScaleRange")]
        public BindingList<VectorScaleRangeType> VectorScaleRange {
            get {
                return this.vectorScaleRangeField;
            }
            set {
                if ((this.vectorScaleRangeField != null)) {
                    if ((vectorScaleRangeField.Equals(value) != true)) {
                        this.vectorScaleRangeField = value;
                        this.OnPropertyChanged("VectorScaleRange");
                    }
                }
                else {
                    this.vectorScaleRangeField = value;
                    this.OnPropertyChanged("VectorScaleRange");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(VectorLayerDefinitionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VectorLayerDefinitionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an VectorLayerDefinitionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output VectorLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out VectorLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(VectorLayerDefinitionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out VectorLayerDefinitionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static VectorLayerDefinitionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((VectorLayerDefinitionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current VectorLayerDefinitionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an VectorLayerDefinitionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VectorLayerDefinitionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VectorLayerDefinitionType obj, out System.Exception exception) {
            exception = null;
            obj = default(VectorLayerDefinitionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out VectorLayerDefinitionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static VectorLayerDefinitionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this VectorLayerDefinitionType object
        /// </summary>
        public virtual VectorLayerDefinitionType Clone() {
            return ((VectorLayerDefinitionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class NameStringPairType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string valueField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string Name {
            get {
                return this.nameField;
            }
            set {
                if ((this.nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NameStringPairType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NameStringPairType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an NameStringPairType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NameStringPairType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NameStringPairType obj, out System.Exception exception) {
            exception = null;
            obj = default(NameStringPairType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out NameStringPairType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static NameStringPairType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((NameStringPairType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current NameStringPairType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an NameStringPairType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NameStringPairType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NameStringPairType obj, out System.Exception exception) {
            exception = null;
            obj = default(NameStringPairType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out NameStringPairType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static NameStringPairType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this NameStringPairType object
        /// </summary>
        public virtual NameStringPairType Clone() {
            return ((NameStringPairType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class VectorScaleRangeType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double minScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double maxScaleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool maxScaleFieldSpecified;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<object> itemsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ElevationSettingsType elevationSettingsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public VectorScaleRangeType() {
            this.minScaleField = 0;
        }
        
        [System.ComponentModel.DefaultValueAttribute(0)]
        public double MinScale {
            get {
                return this.minScaleField;
            }
            set {
                if ((minScaleField.Equals(value) != true)) {
                    this.minScaleField = value;
                    this.OnPropertyChanged("MinScale");
                }
            }
        }
        
        public double MaxScale {
            get {
                return this.maxScaleField;
            }
            set {
                if ((maxScaleField.Equals(value) != true)) {
                    this.maxScaleField = value;
                    this.OnPropertyChanged("MaxScale");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxScaleSpecified {
            get {
                return this.maxScaleFieldSpecified;
            }
            set {
                if ((maxScaleFieldSpecified.Equals(value) != true)) {
                    this.maxScaleFieldSpecified = value;
                    this.OnPropertyChanged("MaxScaleSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AreaTypeStyle", typeof(AreaTypeStyleType))]
        [System.Xml.Serialization.XmlElementAttribute("CompositeTypeStyle", typeof(CompositeTypeStyle))]
        [System.Xml.Serialization.XmlElementAttribute("LineTypeStyle", typeof(LineTypeStyleType))]
        [System.Xml.Serialization.XmlElementAttribute("PointTypeStyle", typeof(PointTypeStyleType))]
        public BindingList<object> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        public ElevationSettingsType ElevationSettings {
            get {
                return this.elevationSettingsField;
            }
            set {
                if ((this.elevationSettingsField != null)) {
                    if ((elevationSettingsField.Equals(value) != true)) {
                        this.elevationSettingsField = value;
                        this.OnPropertyChanged("ElevationSettings");
                    }
                }
                else {
                    this.elevationSettingsField = value;
                    this.OnPropertyChanged("ElevationSettings");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(VectorScaleRangeType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VectorScaleRangeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an VectorScaleRangeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output VectorScaleRangeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out VectorScaleRangeType obj, out System.Exception exception) {
            exception = null;
            obj = default(VectorScaleRangeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out VectorScaleRangeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static VectorScaleRangeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((VectorScaleRangeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current VectorScaleRangeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an VectorScaleRangeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VectorScaleRangeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VectorScaleRangeType obj, out System.Exception exception) {
            exception = null;
            obj = default(VectorScaleRangeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out VectorScaleRangeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static VectorScaleRangeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this VectorScaleRangeType object
        /// </summary>
        public virtual VectorScaleRangeType Clone() {
            return ((VectorScaleRangeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class AreaTypeStyleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<AreaRuleType> areaRuleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool showInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public AreaTypeStyleType() {
            this.showInLegendField = true;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AreaRule")]
        public BindingList<AreaRuleType> AreaRule {
            get {
                return this.areaRuleField;
            }
            set {
                if ((this.areaRuleField != null)) {
                    if ((areaRuleField.Equals(value) != true)) {
                        this.areaRuleField = value;
                        this.OnPropertyChanged("AreaRule");
                    }
                }
                else {
                    this.areaRuleField = value;
                    this.OnPropertyChanged("AreaRule");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ShowInLegend {
            get {
                return this.showInLegendField;
            }
            set {
                if ((showInLegendField.Equals(value) != true)) {
                    this.showInLegendField = value;
                    this.OnPropertyChanged("ShowInLegend");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AreaTypeStyleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AreaTypeStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AreaTypeStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AreaTypeStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AreaTypeStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaTypeStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AreaTypeStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AreaTypeStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AreaTypeStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AreaTypeStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AreaTypeStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AreaTypeStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AreaTypeStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaTypeStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AreaTypeStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AreaTypeStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AreaTypeStyleType object
        /// </summary>
        public virtual AreaTypeStyleType Clone() {
            return ((AreaTypeStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class AreaRuleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextSymbolType labelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AreaSymbolizationFillType itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        public TextSymbolType Label {
            get {
                return this.labelField;
            }
            set {
                if ((this.labelField != null)) {
                    if ((labelField.Equals(value) != true)) {
                        this.labelField = value;
                        this.OnPropertyChanged("Label");
                    }
                }
                else {
                    this.labelField = value;
                    this.OnPropertyChanged("Label");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AreaSymbolization2D")]
        public AreaSymbolizationFillType Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AreaRuleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AreaRuleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AreaRuleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AreaRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AreaRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaRuleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AreaRuleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AreaRuleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AreaRuleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AreaRuleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AreaRuleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AreaRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AreaRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaRuleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AreaRuleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AreaRuleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AreaRuleType object
        /// </summary>
        public virtual AreaRuleType Clone() {
            return ((AreaRuleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class AreaSymbolizationFillType : AreaSymbolizationType, System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private FillType fillField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private StrokeType strokeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public FillType Fill {
            get {
                return this.fillField;
            }
            set {
                if ((this.fillField != null)) {
                    if ((fillField.Equals(value) != true)) {
                        this.fillField = value;
                        this.OnPropertyChanged("Fill");
                    }
                }
                else {
                    this.fillField = value;
                    this.OnPropertyChanged("Fill");
                }
            }
        }
        
        public StrokeType Stroke {
            get {
                return this.strokeField;
            }
            set {
                if ((this.strokeField != null)) {
                    if ((strokeField.Equals(value) != true)) {
                        this.strokeField = value;
                        this.OnPropertyChanged("Stroke");
                    }
                }
                else {
                    this.strokeField = value;
                    this.OnPropertyChanged("Stroke");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AreaSymbolizationFillType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AreaSymbolizationFillType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AreaSymbolizationFillType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AreaSymbolizationFillType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AreaSymbolizationFillType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaSymbolizationFillType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AreaSymbolizationFillType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AreaSymbolizationFillType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AreaSymbolizationFillType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AreaSymbolizationFillType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AreaSymbolizationFillType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AreaSymbolizationFillType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AreaSymbolizationFillType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaSymbolizationFillType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AreaSymbolizationFillType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AreaSymbolizationFillType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AreaSymbolizationFillType object
        /// </summary>
        public virtual AreaSymbolizationFillType Clone() {
            return ((AreaSymbolizationFillType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaSymbolizationFillType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class AreaSymbolizationType : System.ComponentModel.INotifyPropertyChanged {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AreaSymbolizationType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AreaSymbolizationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AreaSymbolizationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AreaSymbolizationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AreaSymbolizationType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaSymbolizationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AreaSymbolizationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AreaSymbolizationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AreaSymbolizationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AreaSymbolizationType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AreaSymbolizationType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AreaSymbolizationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AreaSymbolizationType obj, out System.Exception exception) {
            exception = null;
            obj = default(AreaSymbolizationType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AreaSymbolizationType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AreaSymbolizationType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AreaSymbolizationType object
        /// </summary>
        public virtual AreaSymbolizationType Clone() {
            return ((AreaSymbolizationType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class CompositeTypeStyle : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<CompositeRule> compositeRuleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool showInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public CompositeTypeStyle() {
            this.showInLegendField = true;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CompositeRule")]
        public BindingList<CompositeRule> CompositeRule {
            get {
                return this.compositeRuleField;
            }
            set {
                if ((this.compositeRuleField != null)) {
                    if ((compositeRuleField.Equals(value) != true)) {
                        this.compositeRuleField = value;
                        this.OnPropertyChanged("CompositeRule");
                    }
                }
                else {
                    this.compositeRuleField = value;
                    this.OnPropertyChanged("CompositeRule");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ShowInLegend {
            get {
                return this.showInLegendField;
            }
            set {
                if ((showInLegendField.Equals(value) != true)) {
                    this.showInLegendField = value;
                    this.OnPropertyChanged("ShowInLegend");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CompositeTypeStyle));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CompositeTypeStyle object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CompositeTypeStyle object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CompositeTypeStyle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CompositeTypeStyle obj, out System.Exception exception) {
            exception = null;
            obj = default(CompositeTypeStyle);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CompositeTypeStyle obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CompositeTypeStyle Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CompositeTypeStyle)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CompositeTypeStyle object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CompositeTypeStyle object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CompositeTypeStyle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CompositeTypeStyle obj, out System.Exception exception) {
            exception = null;
            obj = default(CompositeTypeStyle);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CompositeTypeStyle obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CompositeTypeStyle LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CompositeTypeStyle object
        /// </summary>
        public virtual CompositeTypeStyle Clone() {
            return ((CompositeTypeStyle)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class CompositeRule : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private CompositeSymbolization compositeSymbolizationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        public CompositeSymbolization CompositeSymbolization {
            get {
                return this.compositeSymbolizationField;
            }
            set {
                if ((this.compositeSymbolizationField != null)) {
                    if ((compositeSymbolizationField.Equals(value) != true)) {
                        this.compositeSymbolizationField = value;
                        this.OnPropertyChanged("CompositeSymbolization");
                    }
                }
                else {
                    this.compositeSymbolizationField = value;
                    this.OnPropertyChanged("CompositeSymbolization");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CompositeRule));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CompositeRule object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CompositeRule object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CompositeRule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CompositeRule obj, out System.Exception exception) {
            exception = null;
            obj = default(CompositeRule);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CompositeRule obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CompositeRule Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CompositeRule)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CompositeRule object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CompositeRule object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CompositeRule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CompositeRule obj, out System.Exception exception) {
            exception = null;
            obj = default(CompositeRule);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CompositeRule obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CompositeRule LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CompositeRule object
        /// </summary>
        public virtual CompositeRule Clone() {
            return ((CompositeRule)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class CompositeSymbolization : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<SymbolInstance> symbolInstanceField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("SymbolInstance")]
        public BindingList<SymbolInstance> SymbolInstance {
            get {
                return this.symbolInstanceField;
            }
            set {
                if ((this.symbolInstanceField != null)) {
                    if ((symbolInstanceField.Equals(value) != true)) {
                        this.symbolInstanceField = value;
                        this.OnPropertyChanged("SymbolInstance");
                    }
                }
                else {
                    this.symbolInstanceField = value;
                    this.OnPropertyChanged("SymbolInstance");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CompositeSymbolization));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CompositeSymbolization object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CompositeSymbolization object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CompositeSymbolization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CompositeSymbolization obj, out System.Exception exception) {
            exception = null;
            obj = default(CompositeSymbolization);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CompositeSymbolization obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CompositeSymbolization Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CompositeSymbolization)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CompositeSymbolization object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CompositeSymbolization object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CompositeSymbolization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CompositeSymbolization obj, out System.Exception exception) {
            exception = null;
            obj = default(CompositeSymbolization);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CompositeSymbolization obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CompositeSymbolization LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CompositeSymbolization object
        /// </summary>
        public virtual CompositeSymbolization Clone() {
            return ((CompositeSymbolization)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class SymbolInstance : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ParameterOverrides parameterOverridesField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string scaleXField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string scaleYField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string insertionOffsetXField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string insertionOffsetYField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SizeContextType sizeContextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string drawLastField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string checkExclusionRegionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string addToExclusionRegionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string positioningAlgorithmField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string renderingPassField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private UsageContextType usageContextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GeometryContextType geometryContextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public SymbolInstance() {
            this.scaleXField = "1.0";
            this.scaleYField = "1.0";
            this.insertionOffsetXField = "0.0";
            this.insertionOffsetYField = "0.0";
            this.sizeContextField = SizeContextType.DeviceUnits;
            this.drawLastField = "false";
            this.checkExclusionRegionField = "false";
            this.addToExclusionRegionField = "false";
            this.renderingPassField = "0";
            this.usageContextField = UsageContextType.Unspecified;
            this.geometryContextField = GeometryContextType.Unspecified;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CompoundSymbolDefinition", typeof(CompoundSymbolDefinition))]
        [System.Xml.Serialization.XmlElementAttribute("ResourceId", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("SimpleSymbolDefinition", typeof(SimpleSymbolDefinition))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public ParameterOverrides ParameterOverrides {
            get {
                return this.parameterOverridesField;
            }
            set {
                if ((this.parameterOverridesField != null)) {
                    if ((parameterOverridesField.Equals(value) != true)) {
                        this.parameterOverridesField = value;
                        this.OnPropertyChanged("ParameterOverrides");
                    }
                }
                else {
                    this.parameterOverridesField = value;
                    this.OnPropertyChanged("ParameterOverrides");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("1.0")]
        public string ScaleX {
            get {
                return this.scaleXField;
            }
            set {
                if ((this.scaleXField != null)) {
                    if ((scaleXField.Equals(value) != true)) {
                        this.scaleXField = value;
                        this.OnPropertyChanged("ScaleX");
                    }
                }
                else {
                    this.scaleXField = value;
                    this.OnPropertyChanged("ScaleX");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("1.0")]
        public string ScaleY {
            get {
                return this.scaleYField;
            }
            set {
                if ((this.scaleYField != null)) {
                    if ((scaleYField.Equals(value) != true)) {
                        this.scaleYField = value;
                        this.OnPropertyChanged("ScaleY");
                    }
                }
                else {
                    this.scaleYField = value;
                    this.OnPropertyChanged("ScaleY");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("0.0")]
        public string InsertionOffsetX {
            get {
                return this.insertionOffsetXField;
            }
            set {
                if ((this.insertionOffsetXField != null)) {
                    if ((insertionOffsetXField.Equals(value) != true)) {
                        this.insertionOffsetXField = value;
                        this.OnPropertyChanged("InsertionOffsetX");
                    }
                }
                else {
                    this.insertionOffsetXField = value;
                    this.OnPropertyChanged("InsertionOffsetX");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("0.0")]
        public string InsertionOffsetY {
            get {
                return this.insertionOffsetYField;
            }
            set {
                if ((this.insertionOffsetYField != null)) {
                    if ((insertionOffsetYField.Equals(value) != true)) {
                        this.insertionOffsetYField = value;
                        this.OnPropertyChanged("InsertionOffsetY");
                    }
                }
                else {
                    this.insertionOffsetYField = value;
                    this.OnPropertyChanged("InsertionOffsetY");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(SizeContextType.DeviceUnits)]
        public SizeContextType SizeContext {
            get {
                return this.sizeContextField;
            }
            set {
                if ((sizeContextField.Equals(value) != true)) {
                    this.sizeContextField = value;
                    this.OnPropertyChanged("SizeContext");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("false")]
        public string DrawLast {
            get {
                return this.drawLastField;
            }
            set {
                if ((this.drawLastField != null)) {
                    if ((drawLastField.Equals(value) != true)) {
                        this.drawLastField = value;
                        this.OnPropertyChanged("DrawLast");
                    }
                }
                else {
                    this.drawLastField = value;
                    this.OnPropertyChanged("DrawLast");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("false")]
        public string CheckExclusionRegion {
            get {
                return this.checkExclusionRegionField;
            }
            set {
                if ((this.checkExclusionRegionField != null)) {
                    if ((checkExclusionRegionField.Equals(value) != true)) {
                        this.checkExclusionRegionField = value;
                        this.OnPropertyChanged("CheckExclusionRegion");
                    }
                }
                else {
                    this.checkExclusionRegionField = value;
                    this.OnPropertyChanged("CheckExclusionRegion");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("false")]
        public string AddToExclusionRegion {
            get {
                return this.addToExclusionRegionField;
            }
            set {
                if ((this.addToExclusionRegionField != null)) {
                    if ((addToExclusionRegionField.Equals(value) != true)) {
                        this.addToExclusionRegionField = value;
                        this.OnPropertyChanged("AddToExclusionRegion");
                    }
                }
                else {
                    this.addToExclusionRegionField = value;
                    this.OnPropertyChanged("AddToExclusionRegion");
                }
            }
        }
        
        public string PositioningAlgorithm {
            get {
                return this.positioningAlgorithmField;
            }
            set {
                if ((this.positioningAlgorithmField != null)) {
                    if ((positioningAlgorithmField.Equals(value) != true)) {
                        this.positioningAlgorithmField = value;
                        this.OnPropertyChanged("PositioningAlgorithm");
                    }
                }
                else {
                    this.positioningAlgorithmField = value;
                    this.OnPropertyChanged("PositioningAlgorithm");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string RenderingPass {
            get {
                return this.renderingPassField;
            }
            set {
                if ((this.renderingPassField != null)) {
                    if ((renderingPassField.Equals(value) != true)) {
                        this.renderingPassField = value;
                        this.OnPropertyChanged("RenderingPass");
                    }
                }
                else {
                    this.renderingPassField = value;
                    this.OnPropertyChanged("RenderingPass");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(UsageContextType.Unspecified)]
        public UsageContextType UsageContext {
            get {
                return this.usageContextField;
            }
            set {
                if ((usageContextField.Equals(value) != true)) {
                    this.usageContextField = value;
                    this.OnPropertyChanged("UsageContext");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(GeometryContextType.Unspecified)]
        public GeometryContextType GeometryContext {
            get {
                return this.geometryContextField;
            }
            set {
                if ((geometryContextField.Equals(value) != true)) {
                    this.geometryContextField = value;
                    this.OnPropertyChanged("GeometryContext");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SymbolInstance));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SymbolInstance object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SymbolInstance object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SymbolInstance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SymbolInstance obj, out System.Exception exception) {
            exception = null;
            obj = default(SymbolInstance);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SymbolInstance obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SymbolInstance Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SymbolInstance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SymbolInstance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SymbolInstance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SymbolInstance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SymbolInstance obj, out System.Exception exception) {
            exception = null;
            obj = default(SymbolInstance);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SymbolInstance obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SymbolInstance LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SymbolInstance object
        /// </summary>
        public virtual SymbolInstance Clone() {
            return ((SymbolInstance)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ParameterOverrides : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<Override> overrideField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Override")]
        public BindingList<Override> Override {
            get {
                return this.overrideField;
            }
            set {
                if ((this.overrideField != null)) {
                    if ((overrideField.Equals(value) != true)) {
                        this.overrideField = value;
                        this.OnPropertyChanged("Override");
                    }
                }
                else {
                    this.overrideField = value;
                    this.OnPropertyChanged("Override");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ParameterOverrides));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ParameterOverrides object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ParameterOverrides object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ParameterOverrides object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ParameterOverrides obj, out System.Exception exception) {
            exception = null;
            obj = default(ParameterOverrides);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ParameterOverrides obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ParameterOverrides Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ParameterOverrides)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ParameterOverrides object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ParameterOverrides object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ParameterOverrides object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ParameterOverrides obj, out System.Exception exception) {
            exception = null;
            obj = default(ParameterOverrides);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ParameterOverrides obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ParameterOverrides LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ParameterOverrides object
        /// </summary>
        public virtual ParameterOverrides Clone() {
            return ((ParameterOverrides)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Override : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string symbolNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string parameterIdentifierField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string parameterValueField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ThemeLabel themeLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string SymbolName {
            get {
                return this.symbolNameField;
            }
            set {
                if ((this.symbolNameField != null)) {
                    if ((symbolNameField.Equals(value) != true)) {
                        this.symbolNameField = value;
                        this.OnPropertyChanged("SymbolName");
                    }
                }
                else {
                    this.symbolNameField = value;
                    this.OnPropertyChanged("SymbolName");
                }
            }
        }
        
        public string ParameterIdentifier {
            get {
                return this.parameterIdentifierField;
            }
            set {
                if ((this.parameterIdentifierField != null)) {
                    if ((parameterIdentifierField.Equals(value) != true)) {
                        this.parameterIdentifierField = value;
                        this.OnPropertyChanged("ParameterIdentifier");
                    }
                }
                else {
                    this.parameterIdentifierField = value;
                    this.OnPropertyChanged("ParameterIdentifier");
                }
            }
        }
        
        public string ParameterValue {
            get {
                return this.parameterValueField;
            }
            set {
                if ((this.parameterValueField != null)) {
                    if ((parameterValueField.Equals(value) != true)) {
                        this.parameterValueField = value;
                        this.OnPropertyChanged("ParameterValue");
                    }
                }
                else {
                    this.parameterValueField = value;
                    this.OnPropertyChanged("ParameterValue");
                }
            }
        }
        
        public ThemeLabel ThemeLabel {
            get {
                return this.themeLabelField;
            }
            set {
                if ((this.themeLabelField != null)) {
                    if ((themeLabelField.Equals(value) != true)) {
                        this.themeLabelField = value;
                        this.OnPropertyChanged("ThemeLabel");
                    }
                }
                else {
                    this.themeLabelField = value;
                    this.OnPropertyChanged("ThemeLabel");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Override));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Override object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Override object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Override object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Override obj, out System.Exception exception) {
            exception = null;
            obj = default(Override);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Override obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Override Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Override)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Override object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Override object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Override object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Override obj, out System.Exception exception) {
            exception = null;
            obj = default(Override);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Override obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Override LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Override object
        /// </summary>
        public virtual Override Clone() {
            return ((Override)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ThemeLabel : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string descriptionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string categoryFormatField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                if ((this.descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }
        
        public string CategoryFormat {
            get {
                return this.categoryFormatField;
            }
            set {
                if ((this.categoryFormatField != null)) {
                    if ((categoryFormatField.Equals(value) != true)) {
                        this.categoryFormatField = value;
                        this.OnPropertyChanged("CategoryFormat");
                    }
                }
                else {
                    this.categoryFormatField = value;
                    this.OnPropertyChanged("CategoryFormat");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThemeLabel));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThemeLabel object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThemeLabel object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThemeLabel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThemeLabel obj, out System.Exception exception) {
            exception = null;
            obj = default(ThemeLabel);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThemeLabel obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThemeLabel Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThemeLabel)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThemeLabel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThemeLabel object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThemeLabel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThemeLabel obj, out System.Exception exception) {
            exception = null;
            obj = default(ThemeLabel);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThemeLabel obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThemeLabel LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThemeLabel object
        /// </summary>
        public virtual ThemeLabel Clone() {
            return ((ThemeLabel)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class LineTypeStyleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<LineRuleType> lineRuleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool showInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LineTypeStyleType() {
            this.showInLegendField = true;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineRule")]
        public BindingList<LineRuleType> LineRule {
            get {
                return this.lineRuleField;
            }
            set {
                if ((this.lineRuleField != null)) {
                    if ((lineRuleField.Equals(value) != true)) {
                        this.lineRuleField = value;
                        this.OnPropertyChanged("LineRule");
                    }
                }
                else {
                    this.lineRuleField = value;
                    this.OnPropertyChanged("LineRule");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ShowInLegend {
            get {
                return this.showInLegendField;
            }
            set {
                if ((showInLegendField.Equals(value) != true)) {
                    this.showInLegendField = value;
                    this.OnPropertyChanged("ShowInLegend");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LineTypeStyleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LineTypeStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LineTypeStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LineTypeStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LineTypeStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineTypeStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LineTypeStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LineTypeStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LineTypeStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LineTypeStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LineTypeStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LineTypeStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LineTypeStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineTypeStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LineTypeStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LineTypeStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LineTypeStyleType object
        /// </summary>
        public virtual LineTypeStyleType Clone() {
            return ((LineTypeStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class LineRuleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextSymbolType labelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<StrokeType> itemsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        public TextSymbolType Label {
            get {
                return this.labelField;
            }
            set {
                if ((this.labelField != null)) {
                    if ((labelField.Equals(value) != true)) {
                        this.labelField = value;
                        this.OnPropertyChanged("Label");
                    }
                }
                else {
                    this.labelField = value;
                    this.OnPropertyChanged("Label");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineSymbolization2D")]
        public BindingList<StrokeType> Items {
            get {
                return this.itemsField;
            }
            set {
                if ((this.itemsField != null)) {
                    if ((itemsField.Equals(value) != true)) {
                        this.itemsField = value;
                        this.OnPropertyChanged("Items");
                    }
                }
                else {
                    this.itemsField = value;
                    this.OnPropertyChanged("Items");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LineRuleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LineRuleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LineRuleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LineRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LineRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineRuleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LineRuleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LineRuleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LineRuleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LineRuleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LineRuleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LineRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LineRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineRuleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LineRuleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LineRuleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LineRuleType object
        /// </summary>
        public virtual LineRuleType Clone() {
            return ((LineRuleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class PointTypeStyleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool displayAsTextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool allowOverpostField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private BindingList<PointRuleType> pointRuleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool showInLegendField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PointTypeStyleType() {
            this.showInLegendField = true;
        }
        
        public bool DisplayAsText {
            get {
                return this.displayAsTextField;
            }
            set {
                if ((displayAsTextField.Equals(value) != true)) {
                    this.displayAsTextField = value;
                    this.OnPropertyChanged("DisplayAsText");
                }
            }
        }
        
        public bool AllowOverpost {
            get {
                return this.allowOverpostField;
            }
            set {
                if ((allowOverpostField.Equals(value) != true)) {
                    this.allowOverpostField = value;
                    this.OnPropertyChanged("AllowOverpost");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PointRule")]
        public BindingList<PointRuleType> PointRule {
            get {
                return this.pointRuleField;
            }
            set {
                if ((this.pointRuleField != null)) {
                    if ((pointRuleField.Equals(value) != true)) {
                        this.pointRuleField = value;
                        this.OnPropertyChanged("PointRule");
                    }
                }
                else {
                    this.pointRuleField = value;
                    this.OnPropertyChanged("PointRule");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ShowInLegend {
            get {
                return this.showInLegendField;
            }
            set {
                if ((showInLegendField.Equals(value) != true)) {
                    this.showInLegendField = value;
                    this.OnPropertyChanged("ShowInLegend");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PointTypeStyleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointTypeStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PointTypeStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointTypeStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PointTypeStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointTypeStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PointTypeStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PointTypeStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PointTypeStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PointTypeStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PointTypeStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointTypeStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PointTypeStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointTypeStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PointTypeStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PointTypeStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PointTypeStyleType object
        /// </summary>
        public virtual PointTypeStyleType Clone() {
            return ((PointTypeStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class PointRuleType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string legendLabelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string filterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TextSymbolType labelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PointSymbolization2DType itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public string LegendLabel {
            get {
                return this.legendLabelField;
            }
            set {
                if ((this.legendLabelField != null)) {
                    if ((legendLabelField.Equals(value) != true)) {
                        this.legendLabelField = value;
                        this.OnPropertyChanged("LegendLabel");
                    }
                }
                else {
                    this.legendLabelField = value;
                    this.OnPropertyChanged("LegendLabel");
                }
            }
        }
        
        public string Filter {
            get {
                return this.filterField;
            }
            set {
                if ((this.filterField != null)) {
                    if ((filterField.Equals(value) != true)) {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }
        
        public TextSymbolType Label {
            get {
                return this.labelField;
            }
            set {
                if ((this.labelField != null)) {
                    if ((labelField.Equals(value) != true)) {
                        this.labelField = value;
                        this.OnPropertyChanged("Label");
                    }
                }
                else {
                    this.labelField = value;
                    this.OnPropertyChanged("Label");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PointSymbolization2D")]
        public PointSymbolization2DType Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PointRuleType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointRuleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PointRuleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PointRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointRuleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PointRuleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PointRuleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PointRuleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PointRuleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PointRuleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointRuleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PointRuleType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointRuleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PointRuleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PointRuleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PointRuleType object
        /// </summary>
        public virtual PointRuleType Clone() {
            return ((PointRuleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class PointSymbolization2DType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SymbolType itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Block", typeof(BlockSymbolType))]
        [System.Xml.Serialization.XmlElementAttribute("Font", typeof(FontSymbolType))]
        [System.Xml.Serialization.XmlElementAttribute("Image", typeof(ImageSymbolType))]
        [System.Xml.Serialization.XmlElementAttribute("Mark", typeof(MarkSymbolType))]
        [System.Xml.Serialization.XmlElementAttribute("W2D", typeof(W2DSymbolType))]
        public SymbolType Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PointSymbolization2DType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointSymbolization2DType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PointSymbolization2DType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointSymbolization2DType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PointSymbolization2DType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointSymbolization2DType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PointSymbolization2DType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PointSymbolization2DType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PointSymbolization2DType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PointSymbolization2DType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PointSymbolization2DType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointSymbolization2DType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PointSymbolization2DType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointSymbolization2DType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PointSymbolization2DType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PointSymbolization2DType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PointSymbolization2DType object
        /// </summary>
        public virtual PointSymbolization2DType Clone() {
            return ((PointSymbolization2DType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ElevationSettingsType : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string zOffsetField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string zExtrusionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ElevationTypeType zOffsetTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LengthUnitType unitField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtendedDataType extendedData1Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ElevationSettingsType() {
            this.zOffsetTypeField = ElevationTypeType.RelativeToGround;
            this.unitField = LengthUnitType.Centimeters;
        }
        
        public string ZOffset {
            get {
                return this.zOffsetField;
            }
            set {
                if ((this.zOffsetField != null)) {
                    if ((zOffsetField.Equals(value) != true)) {
                        this.zOffsetField = value;
                        this.OnPropertyChanged("ZOffset");
                    }
                }
                else {
                    this.zOffsetField = value;
                    this.OnPropertyChanged("ZOffset");
                }
            }
        }
        
        public string ZExtrusion {
            get {
                return this.zExtrusionField;
            }
            set {
                if ((this.zExtrusionField != null)) {
                    if ((zExtrusionField.Equals(value) != true)) {
                        this.zExtrusionField = value;
                        this.OnPropertyChanged("ZExtrusion");
                    }
                }
                else {
                    this.zExtrusionField = value;
                    this.OnPropertyChanged("ZExtrusion");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(ElevationTypeType.RelativeToGround)]
        public ElevationTypeType ZOffsetType {
            get {
                return this.zOffsetTypeField;
            }
            set {
                if ((zOffsetTypeField.Equals(value) != true)) {
                    this.zOffsetTypeField = value;
                    this.OnPropertyChanged("ZOffsetType");
                }
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(LengthUnitType.Centimeters)]
        public LengthUnitType Unit {
            get {
                return this.unitField;
            }
            set {
                if ((unitField.Equals(value) != true)) {
                    this.unitField = value;
                    this.OnPropertyChanged("Unit");
                }
            }
        }
        
        public ExtendedDataType ExtendedData1 {
            get {
                return this.extendedData1Field;
            }
            set {
                if ((this.extendedData1Field != null)) {
                    if ((extendedData1Field.Equals(value) != true)) {
                        this.extendedData1Field = value;
                        this.OnPropertyChanged("ExtendedData1");
                    }
                }
                else {
                    this.extendedData1Field = value;
                    this.OnPropertyChanged("ExtendedData1");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ElevationSettingsType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ElevationSettingsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ElevationSettingsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ElevationSettingsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ElevationSettingsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ElevationSettingsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ElevationSettingsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ElevationSettingsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ElevationSettingsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ElevationSettingsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ElevationSettingsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ElevationSettingsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ElevationSettingsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ElevationSettingsType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ElevationSettingsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ElevationSettingsType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ElevationSettingsType object
        /// </summary>
        public virtual ElevationSettingsType Clone() {
            return ((ElevationSettingsType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class PointSymbolizationType : System.ComponentModel.INotifyPropertyChanged {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PointSymbolizationType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string info) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointSymbolizationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PointSymbolizationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointSymbolizationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PointSymbolizationType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointSymbolizationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PointSymbolizationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PointSymbolizationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PointSymbolizationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PointSymbolizationType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PointSymbolizationType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointSymbolizationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PointSymbolizationType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointSymbolizationType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PointSymbolizationType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PointSymbolizationType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PointSymbolizationType object
        /// </summary>
        public virtual PointSymbolizationType Clone() {
            return ((PointSymbolizationType)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.33572")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class URLDataType : System.ComponentModel.INotifyPropertyChanged
    {
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string contentField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string descriptionField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string contentOverrideField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string descriptionOverrideField;

        public string Content 
        {
            get
            {
                return this.contentField;
            }
            set
            {
                if ((this.contentField != null))
                {
                    if ((contentField.Equals(value) != true))
                    {
                        this.contentField = value;
                        this.OnPropertyChanged("Content");
                    }
                }
                else
                {
                    this.contentField = value;
                    this.OnPropertyChanged("Content");
                }
            }
        }

        public string Description 
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        public string ContentOverride 
        {
            get
            {
                return this.contentOverrideField;
            }
            set
            {
                if ((this.contentOverrideField != null))
                {
                    if ((contentOverrideField.Equals(value) != true))
                    {
                        this.contentOverrideField = value;
                        this.OnPropertyChanged("ContentOverride");
                    }
                }
                else
                {
                    this.contentOverrideField = value;
                    this.OnPropertyChanged("ContentOverride");
                }
            }
        }

        public string DescriptionOverride 
        {
            get
            {
                return this.descriptionOverrideField;
            }
            set
            {
                if ((this.descriptionOverrideField != null))
                {
                    if ((descriptionOverrideField.Equals(value) != true))
                    {
                        this.descriptionOverrideField = value;
                        this.OnPropertyChanged("DescriptionOverride");
                    }
                }
                else
                {
                    this.descriptionOverrideField = value;
                    this.OnPropertyChanged("DescriptionOverride");
                }
            }
        }


        private static System.Xml.Serialization.XmlSerializer serializer;

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(URLDataType));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string info)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current UrlDataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an UrlDataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output UrlDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out URLDataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(URLDataType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out URLDataType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static URLDataType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((URLDataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current UrlDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an UrlDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output UrlDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out URLDataType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(URLDataType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out URLDataType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static URLDataType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this UrlDataType object
        /// </summary>
        public virtual URLDataType Clone()
        {
            return ((URLDataType)(this.MemberwiseClone()));
        }
        #endregion
    }


}
